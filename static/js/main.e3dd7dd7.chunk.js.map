{"version":3,"sources":["components/Header/Header.tsx","routes/Routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","title","toggleTheme","id","className","type","aria-label","onClick","fill","Home","React","lazy","CountryDetails","Routes","useState","userTheme","setUserTheme","useEffect","theme","localStorage","getItem","setItem","document","querySelector","classList","add","basename","remove","fallback","path","exact","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sRA6BeA,EAtBA,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,YACvB,OACE,qBACEC,GAAG,cACHC,UAAU,mHAFZ,SAIE,sBAAKA,UAAU,6DAAf,UACE,oBAAIA,UAAU,gCAAd,SAA+CH,IAC/C,yBACEI,KAAK,SACLC,aAAW,eACXF,UAAU,uCACVG,QAASL,EAJX,UAME,cAAC,IAAD,CAAMM,KAAK,SACX,sBAAMJ,UAAU,sCAAhB,gCClBJK,EAAOC,IAAMC,MAAK,kBAAM,sDACxBC,EAAiBF,IAAMC,MAC3B,kBAAM,sDAiDOE,EA5CA,WAAO,IAAD,EACeC,mBAAoB,SADnC,mBACZC,EADY,KACDC,EADC,KAGnBC,qBAAU,WACR,IAMsB,EANhBC,EAAQC,aAAaC,QAAQ,UAE9BF,GACHC,aAAaE,QAAQ,QAAS,SAGlB,SAAVH,KACFF,EAAa,QACb,UAAAM,SAASC,cAAc,eAAvB,SAAgCC,UAAUC,IAAI,WAE/C,IAaH,OACE,cAAC,IAAD,CAAeC,SAAS,0CAAxB,SACE,sBAAKtB,UAAU,wGAAf,UACE,cAAC,EAAD,CAAQH,MAAM,uBAAuBC,YAdvB,WACS,IAAD,EAInB,EAJW,SAAda,GACFC,EAAa,SACb,UAAAM,SAASC,cAAc,eAAvB,SAAgCC,UAAUG,OAAO,QACjDR,aAAaE,QAAQ,QAAS,WAE9BL,EAAa,QACb,UAAAM,SAASC,cAAc,eAAvB,SAAgCC,UAAUC,IAAI,QAC9CN,aAAaE,QAAQ,QAAS,YAO5B,qBAAKjB,UAAU,kEAAf,SACE,sBAAMA,UAAU,SAAhB,SACE,eAAC,WAAD,CAAUwB,SAAU,8CAApB,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWtB,IACjC,cAAC,IAAD,CAAOoB,KAAK,gBAAgBE,UAAWnB,iBCxCtCoB,EAJH,WACV,OAAO,cAAC,EAAD,KCWMC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BZ,M","file":"static/js/main.e3dd7dd7.chunk.js","sourcesContent":["import { Moon } from 'react-feather';\n\ninterface HeaderProps {\n  title: string;\n  toggleTheme: () => void;\n}\n\nconst Header = ({ title, toggleTheme }: HeaderProps) => {\n  return (\n    <div\n      id=\"main-header\"\n      className=\"w-full fixed z-50 bg-white dark:bg-common-blue h-20 shadow-md flex justify-center text-dark-blue dark:text-white\"\n    >\n      <div className=\"w-10/12 max-w-screen-2xl flex justify-between items-center\">\n        <h1 className=\"font-bold text-xl sm:text-3xl\">{title}</h1>\n        <button\n          type=\"button\"\n          aria-label=\"Change theme\"\n          className=\"flex cursor-pointer hover:opacity-80\"\n          onClick={toggleTheme}\n        >\n          <Moon fill=\"#fff\" />\n          <span className=\"ml-2 font-semibold hidden sm:inline\">Dark mode</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Suspense, useEffect, useState } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Header from '../components/Header/Header';\n\nconst Home = React.lazy(() => import('pages/Home/Home'));\nconst CountryDetails = React.lazy(\n  () => import('pages/CountryDetails/CountryDetails')\n);\n\ntype UserTheme = 'light' | 'dark';\n\nconst Routes = () => {\n  const [userTheme, setUserTheme] = useState<UserTheme>('light');\n\n  useEffect(() => {\n    const theme = localStorage.getItem('theme') as UserTheme;\n\n    if (!theme) {\n      localStorage.setItem('theme', 'light');\n    }\n\n    if (theme === 'dark') {\n      setUserTheme('dark');\n      document.querySelector('html')?.classList.add('dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    if (userTheme === 'dark') {\n      setUserTheme('light');\n      document.querySelector('html')?.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    } else {\n      setUserTheme('dark');\n      document.querySelector('html')?.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    }\n  };\n  return (\n    <BrowserRouter basename=\"/countries-rest-api-with-theme-switcher\">\n      <div className=\"flex flex-col w-full dark:bg-dark-blue bg-light-gray min-h-screen text-very-dark-blue dark:text-white\">\n        <Header title=\"Where in the world ?\" toggleTheme={toggleTheme} />\n        <div className=\"h-full w-10/12 max-w-screen-2xl flex flex-col self-center mt-20\">\n          <main className=\"h-full\">\n            <Suspense fallback={<span>Loading...</span>}>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/:countryCode\" component={CountryDetails} />\n            </Suspense>\n          </main>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;\n","import Routes from './routes/Routes';\n\nconst App = () => {\n  return <Routes />;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nif (process.env.NODE_ENV === 'development') {\n  document.querySelector('body')?.classList.add('debug-screens');\n  const { worker } = require('./mocks/browser');\n  worker.start();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}